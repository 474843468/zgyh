package com.chinamworld.bocmbci.biz.push;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.os.Build;

import com.chinamworld.bocmbci.android.AndroidVersion;
import com.chinamworld.bocmbci.base.application.BaseDroidApp;
import com.chinamworld.bocmbci.constant.SystemConfig;
import com.chinamworld.bocmbci.log.LogGloble;
import com.chinamworld.bocmbci.log.LogManager;

/**
 * @ClassName: FLogGloble
 * @Description: 打印日志类,保存日志到文件
 * @author luql
 * @date 2013-11-5 下午01:55:10
 * 
 */
public class FLogGloble {

	private static final SimpleDateFormat SDF = new SimpleDateFormat("yyyyMMdd.HHmmss");
	/** 打印日志的开关,生产版本时改为false */
	public static boolean LOGFLAG = SystemConfig.DEBUG;

	/**
	 * 根据打印日志标识，判断是否打印日志 </p>
	 * 
	 * 级别：verbose
	 * 
	 * @param TAG
	 * @param msg
	 * @param t
	 */
	public static void v(String TAG, String msg, Throwable t) {
		if (LOGFLAG) {
			LogGloble.v(TAG, msg, t);
			writeLog("VERBOSE", msg, t);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：verbose
	 * 
	 * @param TAG
	 * @param msg
	 */
	public static void v(String TAG, String msg) {
		if (LOGFLAG) {
			LogGloble.v(TAG, msg);
			writeLog("VERBOSE", msg, null);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志 </p>
	 * 
	 * 级别：debug
	 * 
	 * @param TAG
	 * @param msg
	 * @param t
	 */
	public static void d(String TAG, String msg, Throwable t) {
		if (LOGFLAG) {
			LogGloble.d(TAG, msg, t);
			writeLog("DEBUG", msg, t);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：debug
	 * 
	 * @param TAG
	 * @param msg
	 */
	public static void d(String TAG, String msg) {
		if (LOGFLAG) {
			LogGloble.d(TAG, msg);
			writeLog("DEBUG", msg, null);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：info
	 * 
	 * @param TAG
	 * @param msg
	 */
	public static void i(String TAG, String msg) {
		if (LOGFLAG) {
			LogGloble.i(TAG, msg);
			writeLog("INFO", msg, null);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：info
	 * 
	 * @param TAG
	 * @param msg
	 * @param t
	 */
	public static void i(String TAG, String msg, Throwable t) {
		if (LOGFLAG) {
			LogGloble.i(TAG, msg, t);
			writeLog("INFO", msg, t);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：warn
	 * 
	 * @param TAG
	 * @param msg
	 */
	public static void w(String TAG, String msg) {
		if (LOGFLAG) {
			LogGloble.w(TAG, msg);
			writeLog("WARN", msg, null);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：warn
	 * 
	 * @param TAG
	 * @param msg
	 * @param t
	 */
	public static void w(String TAG, String msg, Throwable t) {
		if (LOGFLAG) {
			LogGloble.w(TAG, msg, t);
			writeLog("WARN", msg, t);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：error
	 * 
	 * @param TAG
	 * @param msg
	 */
	public static void e(String TAG, String msg) {
		if (LOGFLAG) {
			LogGloble.e(TAG, msg);
			writeLog("ERROR", msg, null);
		}
	}

	/**
	 * 根据打印日志标识，判断是否打印日志</p>
	 * 
	 * 级别：error
	 * 
	 * @param TAG
	 * @param msg
	 * @param t
	 */
	public static void e(String TAG, String msg, Throwable t) {
		if (LOGFLAG) {
			LogGloble.e(TAG, msg, t);
			writeLog("ERROR", msg, t);
		}
	}

	private static void writeLog(String level, String msg, Throwable tr) {
		// TODO Auto-generated method stub
		// ###################################################
		// 时间 debug level
		// app 版本信息
		// 手机信息
		// 内容
		// ###################################################
		boolean isError = false;
		try {
			StringBuffer sb = new StringBuffer();

			sb.append("###################" + level + "#########################\n");
			sb.append(new Date().toString());
			sb.append("\nApplication information:\n\n");
			sb.append("This file was generated by the " + BaseDroidApp.APP_PACKAGE + "."
					+ BaseDroidApp.APP_VERSION_NAME + "\n");
			sb.append("\nDevice information:\n\n");
			sb.append("VERSION     : " + AndroidVersion.VERSION + "\n");
			sb.append("BOARD       : " + Build.BOARD + "\n");
			sb.append("BRAND       : " + Build.BRAND + "\n");
			sb.append("CPU_ABI     : " + BaseDroidApp.BUILD_PROPS.getProperty("ro.product.cpu.abi") + "\n");
			sb.append("CPU_ABI2    : " + BaseDroidApp.BUILD_PROPS.getProperty("ro.product.cpu.abi2") + "\n");
			sb.append("DEVICE      : " + Build.DEVICE + "\n");
			sb.append("DISPLAY     : " + Build.DISPLAY + "\n");
			sb.append("FINGERPRINT : " + Build.FINGERPRINT + "\n");
			sb.append("ID          : " + Build.ID + "\n");
			sb.append("MANUFACTURER: " + BaseDroidApp.BUILD_PROPS.getProperty("ro.product.manufacturer") + "\n");
			sb.append("MODEL       : " + Build.MODEL + "\n");
			sb.append("PRODUCT     : " + Build.PRODUCT + "\n");
			sb.append("\nError information:\n\n");
			sb.append(msg);
			sb.append("\n");
			if (tr != null) {
				sb.append(tr);
				sb.append("\n");
			}
			sb.append("#################################################\n");

			String timestamp = SDF.format(new Date());
			String name = BaseDroidApp.APP_PACKAGE + "." + BaseDroidApp.APP_VERSION_NAME + "." + timestamp
					+ ".push";
			File filename = new File(LogManager.LOG_STORAGE, name);
			if (filename != null && filename.exists()) {
				FileOutputStream fos = null;
				try {
					fos = new FileOutputStream(filename, true);
					fos.write(sb.toString().getBytes());
					fos.flush();
					fos.close();
					fos = null;
				} catch (IOException e) {
					isError = true;
				} finally {
					if (fos != null) {
						try {
							fos.close();
						} catch (IOException e) {
							isError = true;
						}
					}
				}
			}
		} catch (Exception e) {
			isError = true;
		}
		if (isError) {
			// 保存出错
		}
	}

}
